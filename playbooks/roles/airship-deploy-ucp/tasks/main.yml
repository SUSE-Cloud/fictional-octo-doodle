---
# tasks file for suse-airship-deploy
- name: Load standard variables
  include_vars: "{{ playbook_dir }}/../vars/common-vars.yml"
  tags:
    - always

- name: Set site path
  set_fact:
    site_path: "{{ upstream_repos_clone_folder }}/airship/treasuremap/site/{{ socok8s_site_name }}/"
    workspace_site_path: "{{ socok8s_workspace }}/{{ socok8s_site_name }}/"
  tags:
    - always

- name: Ensure site directory for {{ socok8s_site_name }} is empty
  become: yes
  file:
    path: "{{ site_path }}"
    state: absent

- name: Ensure site directory for {{ socok8s_site_name }} exists
  file:
    path: "{{ site_path }}"
    state: directory

- name: Ensure local site directory exists
  delegate_to: localhost
  file:
    path: "{{ workspace_site_path }}"
    state: directory

- name: Create site manifest directory structure
  delegate_to: localhost
  file:
    path: '{{ workspace_site_path }}/{{ item.path }}'
    state: directory
  with_filetree: '{{ playbook_dir }}/../site/soc'
  when: item.state == 'directory'
  tags:
    - install

- name: Create site profiles manifests
  delegate_to: localhost
  copy:
    src: '{{ item }}'
    dest: '{{ workspace_site_path }}'
  loop:
    - '{{ playbook_dir }}/../site/soc/profiles'
    - '{{ playbook_dir }}/../site/soc/networks'
    - '{{ playbook_dir }}/../site/soc/baremetal'
    - '{{ playbook_dir }}/../site/soc/deployment'
  tags:
    - install

- name: Create site-definition yaml
  delegate_to: localhost
  template:
    src: '{{ playbook_dir }}/../site/soc/site-definition.yaml'
    dest: '{{ workspace_site_path }}'
  tags:
    - install
    - update_airship_osh_site

- name: Create site software manifests
  delegate_to: localhost
  template:
    src: '{{ item.src }}'
    dest: '{{ workspace_site_path }}/software/{{ item.path }}'
  with_filetree: '{{ playbook_dir }}/../site/soc/software/'
  when: item.state == 'file'
  tags:
    - install
    - update_airship_osh_site

- name: Create site secrets manifests
  delegate_to: localhost
  template:
    src: '{{ item.src }}'
    dest: '{{ workspace_site_path }}/secrets/{{ item.path }}'
  with_filetree: '{{ playbook_dir }}/../site/soc/secrets/'
  when: item.state == 'file'
  tags:
    - install
    - update_airship_osh_site

- name: Sync local site dir with remote
  become: yes
  synchronize:
    src: "{{ workspace_site_path }}"
    dest: "{{ site_path }}"
    recursive: yes

- name: Remove local site
  file:
    path: "{{ workspace_site_path }}"
    state: absent

- name: Create pod scale profile
  become: yes
  copy:
    src: '{{ role_path }}/files/profiles/pod-scale-{{ scale_profile }}.yaml'
    dest:  '{{ site_path }}/profiles'
    mode: 0644

- name: Build Armada image
  make:
    chdir: "{{ upstream_repos_clone_folder }}/airship/{{ item.repo_name }}"
    target: "{{ item.target }}"
    params:
      DISTRO: "{{ suse_distro_identifier }}"
      DISTRO_BASE_IMAGE: "{{ suse_airship_components_base_image }}"
      IMAGE_TAG: "{{ suse_airship_components_image_build_tag }}"
      DOCKER_REGISTRY: "{{ suse_airship_registry_location }}"
      IMAGE_NAME: "{{ item.image_name }}"
      PUSH_IMAGE: "true"
  when:
    - suse_airship_build_local_images
  loop:
    - { repo_name: "armada", target: "images", image_name: "armada" }
  tags:
    - install

- name: Build Shipyard images
  become: yes
  make:
    chdir: "{{ upstream_repos_clone_folder }}/airship/{{ item.repo_name }}"
    target: "{{ item.target }}"
    params:
      DISTRO: "{{ suse_distro_identifier }}"
      DISTRO_BASE_IMAGE: "{{ suse_airship_components_base_image }}"
      IMAGE_TAG: "{{ suse_airship_components_image_build_tag }}"
      DOCKER_REGISTRY: "{{ suse_airship_registry_location }}"
      IMAGE_NAME: "{{ item.image_name }}"
      PUSH_IMAGE: "true"
  when:
    - suse_airship_build_local_images
  loop:
    - { repo_name: "shipyard", target: "images", image_name: "airflow" }
    - { repo_name: "shipyard", target: "images", image_name: "shipyard" }
  tags:
    - install

- name: Build Deckhand images
  make:
    chdir: "{{ upstream_repos_clone_folder }}/airship/{{ item.repo_name }}"
    target: "{{ item.target }}"
    params:
      DISTRO: "{{ suse_distro_identifier }}"
      DISTRO_BASE_IMAGE: "{{ suse_airship_components_base_image }}"
      IMAGE_TAG: "{{ suse_airship_components_image_build_tag }}"
      DOCKER_REGISTRY: "{{ suse_airship_registry_location }}"
      IMAGE_NAME: "{{ item.image_name }}"
      PUSH_IMAGE: "true"
  when:
    - suse_airship_build_local_images
  loop:
    - { repo_name: "deckhand", target: "images", image_name: "deckhand" }
  tags:
    - install

- name: Build Pegleg image
  make:
    chdir: "{{ upstream_repos_clone_folder }}/airship/{{ item.repo_name }}"
    target: "{{ item.target }}"
    params:
      DISTRO: "{{ suse_distro_identifier }}"
      DISTRO_BASE_IMAGE: "{{ suse_airship_components_base_image }}"
      IMAGE_TAG: "{{ suse_airship_components_image_build_tag }}"
      DOCKER_REGISTRY: "{{ suse_airship_registry_location }}"
      IMAGE_NAME: "{{ item.image_name }}"
      PUSH_IMAGE: "true"
  when:
    - suse_airship_build_local_images
  loop:
    - { repo_name: "pegleg", target: "images", image_name: "pegleg" }
  tags:
    - install

- name: Create Armada cluster role binding yaml
  template:
    src: ./armada-cluster-role-binding.yaml.j2
    dest: "{{ socok8s_deploy_config_location }}/armada-cluster-role-binding.yaml"
  tags:
    - install

- name: Apply Armada cluster role binding
  command: "kubectl apply -f {{ socok8s_deploy_config_location }}/armada-cluster-role-binding.yaml"
  register: armada_cluster_role_binding_result
  changed_when: "armada_cluster_role_binding_result.stdout is search('created')"
  tags:
    - install

- name: Create Armada deployment yaml
  template:
    src: ./armada.yaml.j2
    dest: "{{ socok8s_deploy_config_location }}/armada.yaml"
  tags:
    - install

- name: Deploy Armada pod to CaaSP
  command: "kubectl apply -f {{ socok8s_deploy_config_location }}/armada.yaml"
  register: armada_pod_deploy_result
  changed_when: "armada_pod_deploy_result.stdout is search('created')"
  tags:
    - install

- name: Get Armada pod name
  command: 'kubectl get pod -l app=armada -n {{ ucp_namespace_name }} -o jsonpath="{.items[0].metadata.name}"'
  register: armada_results
  until: armada_results.stdout.find('armada-') == 0
  retries: 60
  delay: 10
  changed_when: False

- name: Set Armada pod name
  set_fact: armada_pod_name={{ armada_results.stdout }}

- debug:
    msg: "Armada pod found: {{ armada_pod_name }}"

- name: Wait until Armada pod is ready
  shell: "kubectl get pod {{ armada_pod_name }} -n {{ ucp_namespace_name }} -o jsonpath='{.status.containerStatuses[].ready}'"
  register: armada_pod_status
  until: armada_pod_status.stdout == "true"
  retries: 30
  delay: 10
  changed_when: False

- name: Set pegleg parameters
  set_fact:
    treasuremap_dir: '{{ upstream_repos_clone_folder }}/airship/treasuremap'
    pegleg_image: "{{ airship_pegleg_image }}"
    pegleg: '{{ upstream_repos_clone_folder }}/airship/pegleg/tools/pegleg.sh '
    pegleg_output: 'peggles'
  tags:
    - always

- name: Collect ucp site manifest
  command: '{{ pegleg }} site -r . render "{{ socok8s_site_name }}" -o {{ socok8s_site_name }}-ucp.yaml'
  args:
    chdir: '{{ treasuremap_dir }}'
  environment:
    IMAGE: '{{ pegleg_image }}'
    TERM_OPTS: ' '
  tags:
    - install
    - skip_ansible_lint

# TODO(aagate): Add a changed_when: to help idempotency
- name: Copy Airship UCP content to Armada pod
  command: "{{ item }}"
  loop:
    - kubectl exec {{ armada_pod_name }} -n ucp -- mkdir -p /armada
    - kubectl exec {{ armada_pod_name }} -n ucp -- mkdir -p /armada/.kube
    - kubectl cp ~/.kube/config {{ ucp_namespace_name }}/{{ armada_pod_name }}:/armada/.kube/config
    - kubectl cp  {{ upstream_repos_clone_folder }}/airship/treasuremap/{{ socok8s_site_name }}-ucp.yaml {{ ucp_namespace_name }}/{{ armada_pod_name }}:/armada
    - kubectl exec {{ armada_pod_name }} -n ucp -- mkdir -p /armada/airship-components
    - kubectl cp {{ upstream_repos_clone_folder }}/openstack/openstack-helm-infra {{ ucp_namespace_name }}/{{ armada_pod_name }}:/armada/airship-components/
  tags:
    - install
    - skip_ansible_lint

# TODO(aagate): Add a changed_when: to help idempotency
- name: Deploy Airship UCP ... quick coffee break, maybe?
  command: 'kubectl exec {{ armada_pod_name }} -n ucp -- armada apply /armada/{{ socok8s_site_name }}-ucp.yaml --target-manifest ucp-bootstrap'
  tags:
    - install
    - skip_ansible_lint

- block:
    - name: Wait until Keystone api pod is deployed
      command: 'kubectl get pod -l application=keystone,component=api -n {{ ucp_namespace_name }} -o jsonpath="{.items[0].metadata.name}"'
      register: keystone_results
      until: keystone_results.stdout.find('keystone-api-') == 0
      retries: "{{ ucp_pod_deploy_retries }}"
      delay: 60
      changed_when: False

    - name: Set Keystone api pod name
      set_fact: keystone_api_pod_name={{ keystone_results.stdout }}

    - name: Wait until Keystone api becomes ready
      command: "kubectl get pod {{ keystone_api_pod_name }} -n {{ ucp_namespace_name }} -o jsonpath='{.status.containerStatuses[].ready}'"
      register: keystone_api_pod_status
      until: keystone_api_pod_status.stdout == "true"
      retries: "{{ ucp_pod_ready_retries }}"
      delay: 30
      changed_when: False

    - name: Wait until Shipyard api pod is deployed
      command: 'kubectl get pod -l application=shipyard,component=api -n {{ ucp_namespace_name }} -o jsonpath="{.items[0].metadata.name}"'
      register: shipyard_results
      until: shipyard_results.stdout.find('shipyard-api-') == 0
      retries: "{{ ucp_pod_deploy_retries }}"
      delay: 60
      changed_when: False

    - name: Set shipyard api pod name
      set_fact: shipyard_api_pod_name={{ shipyard_results.stdout }}

    - name: Wait until Shipyard api becomes ready
      command: "kubectl get pod {{ shipyard_api_pod_name }} -n {{ ucp_namespace_name }} -o jsonpath='{.status.containerStatuses[].ready}'"
      register: shipyard_api_pod_status
      until: shipyard_api_pod_status.stdout == "true"
      retries: "{{ ucp_pod_ready_retries }}"
      delay: 30
      changed_when: False

    - name: Wait until Armada api pod is deployed
      command: 'kubectl get pod -l application=armada,component=api -n {{ ucp_namespace_name }} -o jsonpath="{.items[0].metadata.name}"'
      register: armada_results
      until: armada_results.stdout.find('armada-api-') == 0
      retries: "{{ ucp_pod_deploy_retries }}"
      delay: 60
      changed_when: False

    - name: Set armada api pod name
      set_fact: armada_api_pod_name={{ armada_results.stdout }}

    - name: Wait until Armada api becomes ready
      command: "kubectl get pod {{ armada_api_pod_name }} -n {{ ucp_namespace_name }} -o jsonpath='{.status.containerStatuses[].ready}'"
      register: armada_api_pod_status
      until: armada_api_pod_status.stdout == "true"
      retries: "{{ ucp_pod_ready_retries }}"
      delay: 30
      changed_when: False

    # Wait until all pods are in ready or completed state. In case of site update,
    # some pods can be redeployed while the api pods are ready.
    - name: Wait until all pods to be ready
      command: "{{ upstream_repos_clone_folder }}/openstack/openstack-helm/tools/deployment/common/wait-for-pods.sh {{ ucp_namespace_name }} 3600"

    # TODO(aagate): Add a changed_when: to help idempotency
    # local changes need to go into the armada-api pod as thats the one executing the code
    - name: Copy patched repos into Armada-api pod
      command: "{{ item }}"
      loop:
        - kubectl exec {{ armada_pod_name }} -n ucp -- mkdir -p /armada/airship-components
        - kubectl cp {{ upstream_repos_clone_folder }}/openstack/openstack-helm-infra {{ ucp_namespace_name }}/{{ armada_api_pod_name }}:/armada/airship-components/
        - kubectl cp {{ upstream_repos_clone_folder }}/openstack/openstack-helm {{ ucp_namespace_name }}/{{ armada_api_pod_name }}:/armada/airship-components/
      tags:
        - install
        - skip_ansible_lint

  rescue:
    - name: List all ucp pods
      command: "kubectl get pods -n {{ ucp_namespace_name }}"
      register: list_ucp_pods

    - name: "Airship UCP services are not ready, all {{ ucp_namespace_name }} pods have been listed for debugging"
      debug:
        var: list_ucp_pods.stdout_lines
      failed_when: true
