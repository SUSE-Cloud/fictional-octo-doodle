---
- name: Ensure kube folder exists
  file:
    state: directory
    path: "{{ ansible_user_dir }}/.kube"
    mode: "0700"

- name: Check if automation tooling files are present
  stat:
    path: /opt/ccp/environment.json
  register: automation_environment_json

- name: Use automation tooling if possible
  when: automation_environment_json.stat.exists
  block:
  - name: Find kubeconfig location
    command: jq -r '.kubeConfig.admin' /opt/ccp/environment.json
    changed_when: false
    register: _kubeconfiglocation

  - name: Ensure kubeconfig is recent
    stat:
      path: "{{ _kubeconfiglocation.stdout_lines[0] }}"
    register: _kubeconfigfromautomation

  #NOTE: This task needs to run under bash, and therefore the shell module
  #(instead of command) has to be used. Therefore, skipping of linting
  #as to be done.
  - name: Re-run automation if file is old
    when: ansible_date_time.epoch|float - _kubeconfigfromautomation.stat.mtime > 86400
    shell: ./velum-interactions -k -e /opt/ccp/environment.json
    args:
      chdir: "{{ upstream_repos_clone_folder }}/ccp/velum-bootstrap"
      executable: /bin/bash
    tags:
      - skip_ansible_lint

  - name: Copy kubeconfig file
    copy:
      remote_src: yes
      src: "{{ _kubeconfiglocation.stdout_lines[0] }}"
      dest: "{{ ansible_user_dir }}/.kube/config"
      mode: "0600"

- name: Else use files from runner
  when: not automation_environment_json.stat.exists
  block:
    - name: Find if runner has a kubeconfig file
      stat:
        path: "{{ kubeconfig_file_path }}"
      delegate_to: localhost
      register: new_config

    - name: Find if there is an existing .kube/config file
      stat:
        path: "{{ ansible_user_dir }}/.kube/config"
      register: old_config

    - name: Copy local runner kubeconfig file to deploy node
      copy:
        src: "{{ kubeconfig_file_path }}"
        dest: "{{ ansible_user_dir }}/.kube/config"
        mode: "0600"
      when:
        - "new_config.stat.exists"
        - "( not old_config.stat.exists or old_config.stat.mtime < new_config.stat.mtime )"

- name: Test kubectl
  command: kubectl cluster-info
  changed_when: false
  register: _kubectlclusterinfo

- name: Show kubectl cluster-info
  debug:
    var: _kubectlclusterinfo
    verbosity: 1

- name: Do not proceed further if issues in kubectl
  assert:
    that:
      - _kubectlclusterinfo.stdout.find('\u001b[0;32mKubernetes master\u001b[0m is running') != -1
      - _kubectlclusterinfo.stdout.find('\u001b[0;32mDex\u001b[0m is running') != -1
      - _kubectlclusterinfo.stdout.find('\u001b[0;32mKubeDNS\u001b[0m is running') != -1
