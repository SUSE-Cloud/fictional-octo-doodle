---
#
# (c) Copyright 2019 SUSE Linux GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

- name: Hidden terraform dir available
  stat:
    path: "{{ skuba_ci_terraform_workspace }}/.terraform"
  register: _terraform_hidden_dir

- name: Initialize terraform in the workspace dir
  command: "{{ terraform_binary_path }} init -input=false"
  args:
    chdir: "{{ skuba_ci_terraform_workspace }}"
  when: not _terraform_hidden_dir.stat.exists

# NOTE(toabctl): The network resources are already created
# via a heat stack when running "./run.sh deploy_network"
# So only "import" to terraform. Otherwise terraform tries to create
# the same resources again
- name: Import existing networking resources to terraform
  include_tasks: _setup_nodes_terraform_import_resources.yml
  when: import_terraform_resources|bool

# Observed timeout on vpn during nodes cloud-init as all nodes tries to download
# package from repos at same time and init process for each node slows down. So
# removing concurrent execution of operations. Ansible terraform module does not
# have this option so using command module.
- name: Apply terraform plan in the workspace dir
  command: "{{ terraform_binary_path }} apply -auto-approve -parallelism=1"
  args:
    chdir: "{{ skuba_ci_terraform_workspace }}"
  changed_when: False

# TODO: Add specific resource targets instead of refershing all
#  -target=libvirt_domain.worker -target=libvirt_domain.master
#  -target=libvirt_domain.deployer -target=libvirt_domain.lb
- name: Refresh terraform to reconcile state with infra if its re-run
  command: "{{ terraform_binary_path }} refresh"
  args:
    chdir: "{{ skuba_ci_terraform_workspace }}"
  when:
    - _terraform_hidden_dir.stat.exists
    - socok8s_deployment_mechanism == 'kvm'

- name: Get terraform output variables
  command: "{{ terraform_binary_path }} output -json"
  args:
    chdir: "{{ skuba_ci_terraform_workspace }}"
  changed_when: False
  register: _terraform_json_output

- name: Set terraform json output fact
  set_fact:
    _terraform_json_output: "{{ _terraform_json_output.stdout|from_json }}"

- name: Extend inventory in workspace with newly created caasp nodes
  template:
    src: inventory-caasp4.yml.j2
    dest: "{{ socok8s_workspace }}/inventory/caasp4.yml"

- meta: refresh_inventory

- name: Get caasp ips
  set_fact:
    ssh_known_hosts_masters: "{{ groups['caasp-masters'] | map('extract', hostvars, ['ansible_host']) | list }}"
    ssh_known_hosts_workers: "{{ groups['caasp-workers'] | map('extract', hostvars, ['ansible_host']) | list }}"
  tags:
    - ssh
    - caasp4

- name: Get pubkey, and add it to known hosts
  command: "ssh-keyscan -H {{ item | quote }}"
  changed_when: false
  register: _ssh_known_host_results
  loop: "{{ ssh_known_hosts_masters +  ssh_known_hosts_workers }}"
  loop_control:
    label: "{{ item }}"

- name: Insert known hosts
  known_hosts:
    state: present
    name: "{{ item.item }}"
    key: "{{ item.stdout }}"
  loop: "{{ _ssh_known_host_results.results }}"
  loop_control:
    label: "{{ item.item }}"

- name: Setup deployer node for KVM (libvirt) deployment mechanism
  block:
    - name: Extend inventory in workspace with newly created deployer node
      template:
        src: inventory-deployer.yml.j2
        dest: "{{ socok8s_workspace }}/inventory/soc-deployer.yml"

    - meta: refresh_inventory

    - name: Get deployer ip
      set_fact:
        ssh_known_hosts_deployers: "{{ groups['soc-deployer'] | map('extract', hostvars, ['ansible_host']) | list }}"
      tags:
        - ssh
        - deployer

    - name: Get pubkey, and add it to known deployer hosts
      command: "ssh-keyscan -H {{ item | quote }}"
      changed_when: false
      register: _ssh_known_deployer_results
      loop: "{{ ssh_known_hosts_deployers }}"
      loop_control:
        label: "{{ item }}"

    - name: Insert known deployer hosts
      known_hosts:
        state: present
        name: "{{ item.item }}"
        key: "{{ item.stdout }}"
      loop: "{{ _ssh_known_deployer_results.results }}"
      loop_control:
        label: "{{ item.item }}"
  when:
    - socok8s_deployment_mechanism == 'kvm'

# TODO(itxaka): Remove this when we are able to do this on the terraform config: https://github.com/SUSE/skuba/pull/519
- name: Port security disable on ports for masters+workers+lbs
  shell: |
    ## Get ports from our network
    serverports=$(openstack port list --network {{ deploy_on_openstack_internal_network }} -c ID -f value)
    for port in $serverports; do
        ## Disable port security on those pesky instances
        openstack port set ${port} --no-security-group --disable-port-security
    done
  args:
    executable: /bin/bash
  changed_when: False
  when:
    - socok8s_deployment_mechanism == 'openstack'
  tags:
    - bug
