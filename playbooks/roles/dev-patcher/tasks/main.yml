---
- name: Include variables
  include_vars: "{{ item }}"
  loop:
    - "{{ playbook_dir }}/../vars/common-vars.yml"
    - "{{ playbook_dir }}/../vars/manifest.yml"
  tags:
    - always

- name: Install the necessary packages on the deployer node
  package:
    name: "{{ dev_patcher_packages }}"
    state: present
  register: install_packages
  until: install_packages  is success
  retries: 5
  delay: 2

- name: Clone upstream repositories for patching
  git:
    repo: "{{ item.value.src }}"
    dest: "{{ upstream_repos_clone_folder }}/{{ item.key }}"
    update: yes
    force: yes
    version: "{{ item.value.version }}"
  loop: "{{ (upstream_repos | default({})) | dict2items }}"
  register: _gitclone
  until: _gitclone is succeeded

- name: Read git config settings
  git_config:
    list_all: yes
  register: git_config

- name: Set user.name if needed
  git_config:
    name: user.name
    scope: global
    value: "Dev Patcher"
  when: "'user.name' not in git_config['config_values'].keys()"

- name: Set user.email if needed
  git_config:
    name: user.email
    scope: global
    value: "dev-patcher@{{ ansible_hostname }}"
  when: "'user.email' not in git_config['config_values'].keys()"

- name: Get patch details
  include_tasks: patch-repos.yml
  loop: "{{ (dev_patcher_patches) + (dev_patcher_user_patches | default([])) }}"
  loop_control:
    loop_var: patchnumber

- name: Check if there is local code change to cloned repos on deployer
  stat:
    path: "{{ role_path }}/files/repos/"
  register: local_change_repos

- name: Copy local code changes to cloned repos on deployer
  synchronize:
    src: "{{ role_path }}/files/repos/"
    dest: "{{ upstream_repos_clone_folder }}/"
  when: local_change_repos.stat.exists
