---
# tasks file for suse-airship-deploy

- name: Load standard variables
  include_vars: "{{ playbook_dir }}/../vars/common-vars.yml"
  tags:
    - always

- name: Create ses_cluster_configuration
  set_fact:
    ses_cluster_configuration: "{{ lookup('file', socok8s_ses_pools_details) | from_yaml }}"
  tags:
    - always

- name: Create a list of monitors (ip and port) if no override exists for it.
  set_fact:
    suse_airship_deploy_ceph_mons:  "[{% for ip in ses_cluster_configuration.ceph_conf.mon_host.split(',') %}'{{ ip }}:{{ ceph_mon_port | default(6789) }}'{% if not loop.last %},{% endif %}{% endfor %}]"
  when: suse_airship_deploy_ceph_mons is not defined
  tags:
    - always
    - run

- name: Set site path
  set_fact:
    site_path: "{{ upstream_repos_clone_folder }}/airship/treasuremap/site/{{ socok8s_site_name }}"
    no_revision_error_msg: "{{ socok8s_site_name }}-design added no new revision"
  tags:
    - always

- name: Set pegleg parameters
  set_fact:
    treasuremap_dir: '{{ upstream_repos_clone_folder }}/airship/treasuremap'
    pegleg_image: "{{ airship_pegleg_image }}"
    pegleg: '{{ upstream_repos_clone_folder }}/airship/pegleg/tools/pegleg.sh '
    pegleg_output: 'peggles'
  tags:
    - always

# TODO(aagate): Add a changed_when: to help idempotency
- name: Pegleg lint the site manifests
  command: '{{ pegleg }} site -r . lint "{{ socok8s_site_name }}" -x P001 -x P009'
  args:
    chdir: '{{ treasuremap_dir }}'
  environment:
    IMAGE: '{{ pegleg_image }}'
    TERM_OPTS: ' '
  tags:
    - install
    - skip_ansible_lint
    - update_airship_osh_site

- name: Create Pegleg output directory
  become: yes
  file:
    path: '{{ treasuremap_dir }}/{{ pegleg_output }}'
    state: directory
  tags:
    - install

# TODO(aagate): Add a changed_when: to help idempotency
- name: Collect site config
  command: '{{ pegleg }} site -r . collect {{ socok8s_site_name }} -s {{ pegleg_output }}'
  args:
    chdir: '{{ treasuremap_dir }}'
  environment:
    IMAGE: '{{ pegleg_image }}'
    TERM_OPTS: '-l info'
  tags:
    - skip_ansible_lint
    - update_airship_osh_site

- name: Copy site to Shipyard
  become: yes
  delegate_to: '{{ inventory_hostname }}'
  synchronize:
    src: '{{ treasuremap_dir }}/{{ pegleg_output }}'
    dest: '{{ upstream_repos_clone_folder }}/airship/shipyard'
  tags:
    - install
    - update_airship_osh_site

- name: Set up shipyard shell script
  set_fact:
    shipyard: './tools/shipyard.sh'
  tags:
    - install
    - always

- name: Make sure shipyard can read the pegleg output
  become: yes
  file:
    path: '{{ upstream_repos_clone_folder }}/airship/shipyard/{{ pegleg_output }}'
    recurse: yes
    mode: '+r'

# TODO(aagate): Add a changed_when: to help idempotency
- name: Create config docs in Shipyard
  command: '{{ shipyard }} create configdocs {{ socok8s_site_name }}-design --replace --directory=/target/{{ pegleg_output }}'
  args:
    chdir: '{{ upstream_repos_clone_folder }}/airship/shipyard'
  environment:
    SHIPYARD_IMAGE: "{{ shipyard_image }}"
    OS_PASSWORD: "{{ lookup('password', secrets_location + '/ucp_shipyard_keystone_password ' + password_opts) }}"
  register: shipyard_create_config
  failed_when:
    - shipyard_create_config.stdout.find('Error') == 0
    - shipyard_create_config.stdout.find('Traceback') == 0
    - "no_revision_error_msg not in shipyard_create_config.stdout"
  tags:
    - install
    - skip_ansible_lint
    - update_airship_osh_site

# TODO(aagate): Add a changed_when: to help idempotency
- name: Commit config docs in Shipyard
  command: '{{ shipyard }} commit configdocs'
  args:
    chdir: '{{ upstream_repos_clone_folder }}/airship/shipyard'
  environment:
    SHIPYARD_IMAGE: "{{ shipyard_image }}"
    OS_PASSWORD: "{{ lookup('password', secrets_location + '/ucp_shipyard_keystone_password ' + password_opts) }}"
  when:
    - "no_revision_error_msg not in shipyard_create_config.stdout"
  register: shipyard_commit_config
  failed_when: shipyard_commit_config.stdout.find('Error') == 0
  tags:
    - install
    - skip_ansible_lint
    - update_airship_osh_site

# TODO(aagate): Add a changed_when: to help idempotency
- name: Create update software action in Shipyard
  command: '{{ shipyard }} create action update_software --allow-intermediate-commits'
  args:
    chdir: '{{ upstream_repos_clone_folder }}/airship/shipyard'
  environment:
    SHIPYARD_IMAGE: "{{ shipyard_image }}"
    OS_PASSWORD: "{{ lookup('password', secrets_location + '/ucp_shipyard_keystone_password ' + password_opts) }}"
  register: shipyard_update_software
  failed_when: shipyard_update_software.stdout.find('Error') == 0
  tags:
    - install
    - skip_ansible_lint
    - update_airship_osh_site
    - add_compute_node

- name: Print Shipyard action information
  debug:
    msg: "{{ shipyard_update_software.stdout_lines }}"
  tags:
    - install
    - update_airship_osh_site
    - add_compute_node

- name: Get action key
  set_fact:
    shipyard_action_key: '{{ shipyard_update_software.stdout_lines[1].split()[1] }}'
  tags:
    - install
    - update_airship_osh_site
    - add_compute_node

- name: Write site records
  template:
    src: ./site-keys.yaml.j2
    dest: '{{ socok8s_deploy_config_location }}/{{ socok8s_site_name }}-keys.yaml'
  tags:
    - install
    - update_airship_osh_site
    - add_compute_node

- name: Wait 10 minutes before checking the action status
  pause:
    minutes: 10
  tags:
    - install
    - update_airship_osh_site

# TODO(aagate): Add a changed_when: to help idempotency
- block:
    - name: "Wait for update software action to complete... it can take up to {{ airship_deploy_openstack_timeout }} minutes"
      command: '{{ shipyard }} describe {{ shipyard_action_key }}'
      args:
        chdir: '{{ upstream_repos_clone_folder }}/airship/shipyard'
      environment:
        SHIPYARD_IMAGE: "{{ shipyard_image }}"
        OS_PASSWORD: "{{ lookup('password', secrets_location + '/ucp_shipyard_keystone_password ' + password_opts) }}"
      register: shipyard_desc_action
      failed_when: "'failed' in shipyard_desc_action.stdout"
      until: shipyard_desc_action.stdout.find('Processing') < 0 and shipyard_desc_action.stdout.find('running') < 0
      retries: "{{ airship_deploy_openstack_timeout | int * 2 }}"
      delay: 30
      tags:
        - skip_ansible_lint
        - update_airship_osh_site
        - add_compute_node

  rescue:
    - name: Print Shipyard update software action status
      debug:
        msg: "Update Software action has failed and stopped creating pods. Please check"
      failed_when: "'failed' in shipyard_desc_action.stdout"
      tags:
        - update_airship_osh_site
        - add_compute_node

- name: Update Software Action still running
  debug:
    msg: "Update Software action is still running and creating pods"
  when: "'running' in shipyard_desc_action.stdout"
  tags:
    - update_airship_osh_site
    - add_compute_node
