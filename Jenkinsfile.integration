#!groovy

// Global vars so they can be used in different steps
TestDocs = true
TestFunctional = true


pipeline {

    options {
        timestamps()
        parallelsAlwaysFailFast()
        // Note(jhesketh): Unfortunately we can't set a global timeout for the
        //                 pipeline as it would also apply to the post stages
        //                 and hence interrupt our cleanup.
    }

    agent {
        node {
            label "cloud-ccp-ci"
        }
    }

    parameters {
        /* first value in the list is the default */
        booleanParam(name: 'hold_instance_for_debug', defaultValue: false, description: 'Keep this instance up for 3 hours')
    }

    environment {
        /* env.BRANCH_NAME is available in multibranch plugin but not in pipeline plugin used in daily integration job */
        BRANCH_NAME_ONLY="${env.GIT_BRANCH.replaceAll("origin/", "")}"
        /* Sanitize ENVNAME (lowercase and remove some problematic characters)
           as the names of the heat stacks will be derived from this. Also
           the CaaSP Velum automation has issues with mixed case hostnames. */
        SOCOK8S_ENVNAME = "cloud-socok8s-${BRANCH_NAME_ONLY.replaceAll("[^a-zA-Z0-9-]+", "-").toLowerCase()}-${env.BUILD_NUMBER}"
        SOCOK8S_OPENSUSE_MIRROR="https://provo-mirror.opensuse.org"
        OS_CLOUD = "engcloud-socok8s-ci"
        KEYNAME = "engcloud-cloud-ci"
        DEPLOYMENT_MECHANISM = "openstack"
        SOCOK8S_DEPLOY_DSTAT = "YES"
    }

    stages {
        stage('Show environment information') {
            steps {
                sh 'printenv'
            }
        }

        stage('Check for updated files') {
            when { expression { env.BRANCH_NAME != 'master' } }
            steps {
                script {
                    /* When doing PRs, make sure we don't test everything by default */
                    TestDocs = false
                    TestFunctional = false

                    /* Need to fetch master to check against it for the proper diff */
                    sh "git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master"
                    sh "git fetch --no-tags"
                    List<String> sourceChanged = sh(returnStdout: true, script: "git diff --name-only origin/master...origin/${env.BRANCH_NAME}").split()
                    echo "Files changed for this PR:\n${sourceChanged.join('\n')}"
                    TestDocs = sourceChanged.any{it.contains("doc/")} or sourceChanged.any{it.contains("tox.ini")} or sourceChanged.any{it.contains("Jenkinsfile.integration")}
                    /* In the future we could add a conditional to auto TestFunctional if tox.ini or Jenkinsfile is changed */
                    /* when conditionals will be harder to grasp or different code paths */
                    TestFunctional = !sourceChanged.every{it.contains("doc/")}
                }
            }
        }

        stage('lint and docs') {
            parallel {
                stage('Build docs') {
                    when { expression { return TestDocs } }
                    options {
                        timeout(time: 5, unit: 'MINUTES', activity: true)
                    }
                    steps {
                        sh "tox -e docs"
                    }
                    post {
                        success {
                            publishHTML target: [
                                allowMissing: false,
                                alwaysLinkToLastBuild: false,
                                keepAll: true,
                                reportDir: 'doc/build/html',
                                reportFiles: 'index.html',
                                reportName: 'Built Docs'
                            ]
                        }
                    }
                }
            }
        }

        stage('Deploy CaaSP4') {
            when { expression { return  TestFunctional } }
            steps {
                sh 'touch /tmp/${SOCOK8S_ENVNAME}.needcleanup'
                sh "scripts/ci/caasp4.sh"
                try {
                  retry(10) {
                    sh "scripts/checks/are_k8s_nodes_ready.sh"
                  }
                } catch (error) {
                    currentBuild.result = 'FAILURE'
                }
            }
        }

        stage('Deploy Auto-Deploy tooling') {
            when { expression { return  TestFunctional } }
            steps {
                sh "scripts/ci/autodeploy.sh"
            }
        }

    post {
        always {
            logParser projectRulePath: 'scripts/ci/log-parser-plugin-rules.txt', showGraphs: true, useProjectRule: true, parsingRulesPath: null
            script {
                try {
                    sh "scripts/ci/gather_logs.sh"
                    zip archive: true, dir: 'logs/', zipFile: 'logs.zip'
                    archiveArtifacts artifacts: 'logs.zip'
                } catch(e) {
                    echo "Could not gather logs"
                }
            }
            script {
                if (params.hold_instance_for_debug == true) {
                     try {
                        echo "You can reach this node by connecting to its floating IP as root user, with the default password of your image."
                        timeout(time: 3, unit: 'HOURS') {
                            input(message: "Waiting for input before deleting  env ${SOCOK8S_ENVNAME}.")
                        }
                    } catch(e) {
                        echo "Timed out waiting for input, proceeding"
                    }
                }
            }
        }
        cleanup {
            script {
                if (fileExists("/tmp/${env.SOCOK8S_ENVNAME}.needcleanup")) {
                    try {
                        retry(3) {
                            sh 'scripts/ci/caasp4.sh destroy && \
                                rm -f /tmp/${SOCOK8S_ENVNAME}.needcleanup'
                        }
                    } catch (e) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
}
