#!/bin/bash
#
# This is a wrapper to the real code in _run.sh
# This run.sh script is auto generated by the Makefile using
# argbash templating.  This allows us to generate bash completion,
# documentation and argument parsing and an argument help output.
#
# https://argbash.io/
#
#
# DEFINE_SCRIPT_DIR()
# ARG_OPTIONAL_BOOLEAN([quiet],[q],[suppress noisy output],[off])
# ARG_OPTIONAL_BOOLEAN([pre],[p],[Run preflight only],[off])
# ARG_POSITIONAL_SINGLE([command],[The command you want to run.],[setup_everything])
# ARG_TYPE_GROUP_SET([commands],[COMMAND],[command],[add_compute,build_images,deploy_airship,deploy_osh,clean_airship,clean_airship_not_images,clean_k8s,deploy_caasp,deploy_ccp_deployer,deploy_ses,enroll_caasp_workers,patch_upstream,setup_airship,setup_caasp_workers_for_openstack,setup_everything,setup_hosts,setup_openstack,teardown,update_airship_osh],[index])
#
# ARG_USE_ENV([SOCOK8S_ENVNAME],[],[REQUIRED: The base socok8s environment name used for resources])
# ARG_USE_ENV([SOCOK8S_DEVELOPER_MODE],[False],[Enable SOCOK8S script developer mode])
# ARG_USE_ENV([DEPLOYMENT_MECHANISM],[openstack],[The deployment type you want])
# ARG_USE_ENV([USE_ARA],[False],[Use ARA?])
# ARG_USE_ENV([OS_CLOUD],[],[The cloud name defined in your ~/.config/openstack/clouds.yaml])
# ARG_USE_ENV([PREFIX],[socok8s],[The prefix name for all objects created in the OpenStack cloud])
# ARG_USE_ENV([KEYNAME],[],[OpenStack security keypair name to add to your server])
# ARG_USE_ENV([EXTERNAL_NETWORK],[],[The name of the external network you created in OpenStack])
# ARG_USE_ENV([INTERNAL_NETWORK],[],[It will be used as network and server names])
# ARG_USE_ENV([INTERNAL_SUBNET],[],[The name of the subnet you created in OpenStack])
# ARG_USE_ENV([DELETE_ANYWAY],[NO],[Force delete all userspace created stuffs in OpenStack?])
#
# ARG_VERSION([echo $0 v0.1])
# ARG_HELP([This script is used to bootstrap the socok8s dev env. To build the documentation, run tox -edocs],[This is a longer description that should get filled in.])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables
# Setting environmental variables


die()
{
  local _ret=$2
  test -n "$_ret" || _ret=1
  test "$_PRINT_HELP" = yes && print_help >&2
  echo "$1" >&2
  exit ${_ret}
}

# validators

commands()
{
	local _allowed=("add_compute" "build_images" "deploy_airship" "deploy_osh" "clean_airship" "clean_airship_not_images" "clean_k8s" "deploy_caasp" "deploy_ccp_deployer" "deploy_ses" "enroll_caasp_workers" "patch_upstream" "setup_airship" "setup_caasp_workers_for_openstack" "setup_everything" "setup_hosts" "setup_openstack" "teardown" "update_airship_osh") _seeking="$1" _idx=0
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && { test "$3" = "idx" && echo "$_idx" || echo "$element"; } && return 0
		_idx=$((_idx + 1))
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'add_compute', 'build_images', 'deploy_airship', 'deploy_osh', 'clean_airship', 'clean_airship_not_images', 'clean_k8s', 'deploy_caasp', 'deploy_ccp_deployer', 'deploy_ses', 'enroll_caasp_workers', 'patch_upstream', 'setup_airship', 'setup_caasp_workers_for_openstack', 'setup_everything', 'setup_hosts', 'setup_openstack', 'teardown' and 'update_airship_osh'" 4
}


begins_with_short_option()
{
  local first_option all_short_options='qpvh'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command="setup_everything"
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_quiet="off"
_arg_pre="off"


print_help()
{
  printf '%s\n' "This script is used to bootstrap the socok8s dev env. To build the documentation, run tox -edocs"
  printf 'Usage: %s [-q|--(no-)quiet] [-p|--(no-)pre] [-v|--version] [-h|--help] [<command>]\n' "$0"
  printf '\t%s\n' "<command>: The command you want to run. (default: 'setup_everything')"
  printf '\t%s\n' "-q, --quiet, --no-quiet: suppress noisy output (off by default)"
  printf '\t%s\n' "-p, --pre, --no-pre: Run preflight only (off by default)"
  printf '\t%s\n' "-v, --version: Prints version"
  printf '\t%s\n' "-h, --help: Prints help"
printf '\nEnvironment variables that are supported:\n'
printf '\t%s\n' "SOCOK8S_ENVNAME: REQUIRED: The base socok8s environment name used for resources.)"
printf '\t%s\n' "SOCOK8S_DEVELOPER_MODE: Enable SOCOK8S script developer mode. (default: 'False')"
printf '\t%s\n' "DEPLOYMENT_MECHANISM: The deployment type you want. (default: 'openstack')"
printf '\t%s\n' "USE_ARA: Use ARA?. (default: 'False')"
printf '\t%s\n' "OS_CLOUD: The cloud name defined in your ~/.config/openstack/clouds.yaml.)"
printf '\t%s\n' "PREFIX: The prefix name for all objects created in the OpenStack cloud. (default: 'socok8s')"
printf '\t%s\n' "KEYNAME: OpenStack security keypair name to add to your server.)"
printf '\t%s\n' "EXTERNAL_NETWORK: The name of the external network you created in OpenStack.)"
printf '\t%s\n' "INTERNAL_NETWORK: It will be used as network and server names.)"
printf '\t%s\n' "INTERNAL_SUBNET: The name of the subnet you created in OpenStack.)"
printf '\t%s\n' "DELETE_ANYWAY: Force delete all userspace created stuffs in OpenStack?. (default: 'NO')"

  printf '\n%s\n' "This is a longer description that should get filled in."
}


parse_commandline()
{
  _positionals_count=0
  while test $# -gt 0
  do
    _key="$1"
    case "$_key" in
      -q|--no-quiet|--quiet)
        _arg_quiet="on"
        test "${1:0:5}" = "--no-" && _arg_quiet="off"
        ;;
      -q*)
        _arg_quiet="on"
        _next="${_key##-q}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-q" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -p|--no-pre|--pre)
        _arg_pre="on"
        test "${1:0:5}" = "--no-" && _arg_pre="off"
        ;;
      -p*)
        _arg_pre="on"
        _next="${_key##-p}"
        if test -n "$_next" -a "$_next" != "$_key"
        then
          begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
        fi
        ;;
      -v|--version)
        echo $0 v0.1
        exit 0
        ;;
      -v*)
        echo $0 v0.1
        exit 0
        ;;
      -h|--help)
        print_help
        exit 0
        ;;
      -h*)
        print_help
        exit 0
        ;;
      *)
        _last_positional="$1"
        _positionals+=("$_last_positional")
        _positionals_count=$((_positionals_count + 1))
        ;;
    esac
    shift
  done
}


handle_passed_args_count()
{
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
  local _positional_name _shift_for=$1
  _positional_names="_arg_command "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}
  do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
script_dir="$(cd "$(dirname "$(readlink -e "${BASH_SOURCE[0]}")")" && pwd)" || die "Couldn't determine the script's running directory, which probably matters, bailing out" 2
test -n "$SOCOK8S_DEVELOPER_MODE" || SOCOK8S_DEVELOPER_MODE="False"

test -n "$DEPLOYMENT_MECHANISM" || DEPLOYMENT_MECHANISM="openstack"

test -n "$USE_ARA" || USE_ARA="False"

test -n "$PREFIX" || PREFIX="socok8s"

test -n "$DELETE_ANYWAY" || DELETE_ANYWAY="NO"

# Validation of values
_arg_command="$(commands "$_arg_command" "command")" || exit 1
_arg_command_index="$(commands "$_arg_command" "command" idx)"

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash



# printf "Value of '%s': %s\\n" 'command' "$_arg_command"
#

if [ "$_arg_quiet" = "on" ]; then
    QUIET="-q"
fi
. "$script_dir/run.sh"

# ] <-- needed because of Argbash
