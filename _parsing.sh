#!/bin/bash

# Created by argbash-init v2.8.0
# ARG_POSITIONAL_SINGLE([command],[The command you want to run.],[setup_everything])
# ARG_TYPE_GROUP_SET([commands],[COMMAND],[command],[add_compute,build_images,deploy_airship,deploy_osh,clean_airship,clean_airship_not_images,clean_k8s,deploy_caasp,deploy_ccp_deployer,deploy_ses,enroll_caasp_workers,patch_upstream,setup_airship,setup_caasp_workers_for_openstack,setup_everything,setup_hosts,setup_openstack,teardown,update_airship_osh],[index])
# ARG_USE_ENV([DEPLOYMENT_MECHANISM],[openstack],[The deployment type you want])
# ARG_USE_ENV([USE_ARA],[False],[Use ARA?])

# ARG_DEFAULTS_POS([])
# ARG_HELP([This script is used to bootstrap the socok8s dev env. To build the documentation, run tox -edocs])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

# Setting environmental variables
# Setting environmental variables


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

# validators

commands()
{
	local _allowed=("add_compute" "build_images" "deploy_airship" "deploy_osh" "clean_airship" "clean_airship_not_images" "clean_k8s" "deploy_caasp" "deploy_ccp_deployer" "deploy_ses" "enroll_caasp_workers" "patch_upstream" "setup_airship" "setup_caasp_workers_for_openstack" "setup_everything" "setup_hosts" "setup_openstack" "teardown" "update_airship_osh") _seeking="$1" _idx=0
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && { test "$3" = "idx" && echo "$_idx" || echo "$element"; } && return 0
		_idx=$((_idx + 1))
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'add_compute', 'build_images', 'deploy_airship', 'deploy_osh', 'clean_airship', 'clean_airship_not_images', 'clean_k8s', 'deploy_caasp', 'deploy_ccp_deployer', 'deploy_ses', 'enroll_caasp_workers', 'patch_upstream', 'setup_airship', 'setup_caasp_workers_for_openstack', 'setup_everything', 'setup_hosts', 'setup_openstack', 'teardown' and 'update_airship_osh'" 4
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_command="setup_everything"
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "This script is used to bootstrap the socok8s dev env. To build the documentation, run tox -edocs"
	printf 'Usage: %s [-h|--help] [<command>]\n' "$0"
	printf '\t%s\n' "<command>: The command you want to run. (default: 'setup_everything')"
	printf '\t%s\n' "-h, --help: Prints help"
printf '\nEnvironment variables that are supported:\n'
printf '\t%s\n' "DEPLOYMENT_MECHANISM: The deployment type you want. (default: 'openstack')"
printf '\t%s\n' "USE_ARA: Use ARA?. (default: 'False')"

}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 0 and 1, but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_command "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
test -n "$DEPLOYMENT_MECHANISM" || DEPLOYMENT_MECHANISM="openstack"

test -n "$USE_ARA" || USE_ARA="False"

# Validation of values
_arg_command="$(commands "$_arg_command" "command")" || exit 1
_arg_command_index="$(commands "$_arg_command" "command" idx)"

### END OF CODE GENERATED BY Argbash (sortof) ### ])
